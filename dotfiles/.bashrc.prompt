# ~/.bash_prompt: sourced by .bashrc for setting bash prompt

shopt -s checkwinsize

get_tw () {
	local str="$1"
	if [ "$USE_TW" = yes ]; then
		echo $(echo -n "$str" | tw)
	else
		echo ${#str}
	fi
}

init_gitinfo () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" != true ]; then
        unset GIT_BRANCH GIT_REMOTE_NAME GIT_MERGE GIT_REBASE
        return
    fi

	GIT_BRANCH="$(git symbolic-ref --short --quiet HEAD 2>/dev/null)"
    if [ -z "$GIT_BRANCH" ]; then
        GIT_BRANCH="($(git rev-parse --short HEAD))"
    fi

    local remote="$(git config --get branch.master.remote)"
	GIT_REMOTE_NAME="$(basename "$(git config --get remote."$remote".url 2>/dev/null)" .git)"

    local merge="$(git config --get branch."$GIT_BRANCH".merge)"
    GIT_MERGE="${merge#refs/heads/}"

    local rebase="$(git config --get branch."$GIT_BRANCH".rebase)"
    GIT_REBASE="${rebase#refs/heads/}"
}

get_gitinfo () {
	local option="$1"

    if [ -z "$GIT_BRANCH" ]; then
        return
    fi

	if [ "$option" = -r ]; then
		echo "$(reduce_word "$GIT_BRANCH")"
        return
    fi

	if [ "$option" = -s ]; then
		echo "$GIT_BRANCH"
        return
    fi

    local gitinfo=""
    if [ -n "$GIT_REMOTE_NAME" ]; then
        gitinfo="$GIT_REMOTE_NAME: "
    fi

    gitinfo="$gitinfo$GIT_BRANCH"

    if [ -n "$GIT_MERGE" -a "$GIT_BRANCH" != "$GIT_MERGE" ]; then
        if [ "$GIT_REBASE" = true ]; then
            gitinfo="$gitinfo ($GIT_MERGE:r)"
        else
            gitinfo="$gitinfo ($GIT_MERGE:m)"
        fi
    fi

    echo $gitinfo
}

get_gitinfo_str () {
	local option="$1"

    if [ -z "$GIT_BRANCH" ]; then
        return
    fi

	if [ "$option" = -r ]; then
        echo "$C_BG-<$C_GIT$(reduce_word "$GIT_BRANCH")$C_BG>"
        return
    fi

	if [ "$option" = -s ]; then
        echo "$C_BG-<$C_GIT$GIT_BRANCH$C_BG>"
        return
    fi

    local gitinfo_str=""
	if [ -n "$GIT_REMOTE_NAME" ]; then
        gitinfo_str="$gitinfo_str$C_GIT$GIT_REMOTE_NAME$C_BG: "
    fi

    gitinfo_str="$gitinfo_str$C_GIT$GIT_BRANCH"

    if [ -n "$GIT_MERGE" -a "$GIT_BRANCH" != "$GIT_MERGE" ]; then
        if [ "$GIT_REBASE" = true ]; then
            gitinfo_str="$gitinfo_str $C_GIT($GIT_MERGE:r)"
        else
            gitinfo_str="$gitinfo_str $C_GIT($GIT_MERGE:m)"
        fi
    fi

    echo "$C_BG-<$gitinfo_str$C_BG>"
}

reduce_word () {
	local word="$1"
	local suffix="${1:1}"
	local res="${1:0:1}"

	local oldifs="$IFS"
	IFS=aeiou
	for s in $suffix; do
		if [ -n "$s" ]; then
			res="$res$s"
		fi
	done
	IFS="$oldifs"

	if [ ${#res} -lt ${#suffix} ]; then
		echo -n "$res~"
	else
		echo -n "$word"
	fi
}

cut_word () {
	local word="$1"
	local res="${1:0:1}~"

	if [ ${#res} -lt ${#word} ]; then
		echo -n "$res"
	else
		echo -n "$word"
	fi
}

reduce_path () {
	local path=$1
	local reduce_len=$2
	local res=""

	local oldifs="$IFS"
	IFS=/
	for name in $path; do
		if [ $reduce_len -gt 0 ]; then
			short_name="$(reduce_word "$name")"
			res="$res$short_name/"
			reduce_len=$(( $reduce_len - ( ${#name} - ${#short_name} ) ))
		else
			res="$res$name/"
		fi
	done
	IFS="$oldifs"

	echo -n "${res%/}"
}

cut_word () {
	local word="$1"
	local res="${1:0:1}~"

	if [ ${#res} -lt ${#word} ]; then
		echo -n "$res"
	else
		echo -n "$word"
	fi
}

cut_path () {
	local path=$1
	local reduce_len=$2
	local res=""

	local oldifs="$IFS"
	IFS=/
	for name in $path; do
		if [ $reduce_len -gt 0 ]; then
			short_name="$(cut_word "$name")"
			res="$res$short_name/"
			reduce_len=$(( $reduce_len - ( ${#name} - ${#short_name} ) ))
		else
			res="$res$name/"
		fi
	done
	IFS="$oldifs"

	echo -n "${res%/}"
}

make_dash_long () {
	DASH_LONG="--------------------------------"
	if [ "$USE_TW" = yes ]; then
		local dash_long_len=$(echo -n "$DASH_LONG" | tw)
	else
		local dash_long_len="${#DASH_LONG}"
	fi
	while [ "$dash_long_len" -lt "$TERMWIDTH" ]; do
		DASH_LONG="$DASH_LONG$DASH_LONG"
		dash_long_len=$(( $dash_long_len + $dash_long_len ))
	done
}

make_prompt_init () {
	C_USERHOST="\033[38;5;34m"
	C_DIR="\033[38;5;100m"
	C_GIT="\033[38;5;206m"
	C_DATE="\033[38;5;30m"
	C_BG="\033[38;5;245m"
	C_END="\033[0m"

    case "$(uname -s)" in
        MINGW*)
            local gitinfo_str=""
            local dash_str="-"
            local userhost_str="$C_BG<\u$C_BG: "
            local dir_str="$C_DIR\w$C_BG>"
            local date_str="$C_BG<$C_DATE\D{%H:%M:%S %a}$C_BG>"
            PS1="$userhost_str$dir_str$gitinfo_str$dash_str$date_str$C_END\n\\$ "
            return
            ;;
    esac

	if type tw > /dev/null 2> /dev/null; then
		USE_TW=yes
	else
		USE_TW=no
	fi

	if [ -z "$COLUMNS" ]; then
		TERMWIDTH=$(tput cols)
	else
		TERMWIDTH="$COLUMNS"
	fi
	make_dash_long

	HOST_FULL=$(hostname -s 2>/dev/null)
	if [ $? -ne 0 ]; then
		HOST_FULL=$(hostname 2>/dev/null)
	fi

	USERHOST_FULL_LEN=$(get_tw "$USER@$HOST_FULL")
	DATE_LEN=$(get_tw "$(date "+%T %a")")

	case $TERM in
    screen*)
		PROMPT_COMMAND="$PROMPT_COMMAND;make_prompt;make_title;make_screen_hardstatus"
        ;;
	xterm*|cygwin)
		PROMPT_COMMAND="$PROMPT_COMMAND;make_prompt;make_title"
		;;
	*)
		PROMPT_COMMAND="$PROMPT_COMMAND;make_prompt"
		;;
	esac
}

make_screen_hardstatus () {
    local gitinfo="$(get_gitinfo)"
    if [ "$gitinfo" ]; then
        echo -ne "\033_$USER@$HOST_FULL: ${PWD/$HOME/~} ($(get_gitinfo))\033\\"
    else
        echo -ne "\033_$USER@$HOST_FULL: ${PWD/$HOME/~}\033\\"
    fi
}

make_title () {
    local gitinfo="$(get_gitinfo)"
    if [ "$gitinfo" ]; then
        echo -ne "\033]0;$(get_gitinfo) - $HOST_FULL\007"
    else
        echo -ne "\033]0;${PWD/$HOME/~} - $HOST_FULL\007"
    fi
}

make_prompt () {
	if [ -z "$COLUMNS" ]; then
		local termwidth=$(tput cols)
	else
		local termwidth="$COLUMNS"
	fi
	if [ "$termwidth" -ne "$TERMWIDTH" ]; then
		TERMWIDTH="$termwidth"
		make_dash_long
	fi

    local dir="${PWD/$HOME/~}"
	if [ "$USE_TW" = yes ]; then
		local dir_len=$(echo -n "$dir" | tw)
	else
		local dir_len=${#dir}
	fi

	init_gitinfo

	local gitinfo_len=$(get_tw "$(get_gitinfo)")
	local gitinfo_str="$(get_gitinfo_str)"

	if [ $gitinfo_len -gt 0 ]; then
		local deco_len=9
	else
		local deco_len=6
	fi

	if [ "$USE_TW" = yes ]; then
		local wc_margin=0
	else
		local wc_margin=2
	fi

	local userhost="\u@\h"
	local userhost_len="$USERHOST_FULL_LEN"

	dash_len_cmd='local dash_len=$(( $TERMWIDTH - $userhost_len - $dir_len - $gitinfo_len - $DATE_LEN - $deco_len - $wc_margin ))'
	eval $dash_len_cmd

    if [ $dash_len -le 0 ]; then
    	userhost="$(reduce_word "$USER")@$(reduce_word "$HOST_FULL")"
		userhost_len=$(get_tw "$userhost")
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 ]; then
    	userhost="$(cut_word "$USER")@$(cut_word "$HOST_FULL")"
		userhost_len=$(get_tw "$userhost")
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 ]; then
    	local reduce_len=$(( -$dash_len + 1 ))
    	dir="$(reduce_path "$dir" $reduce_len)"
		local dir_len=$(get_tw "$dir")
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 -a $gitinfo_len -gt 0 ]; then
		gitinfo_len=$(get_tw "$(get_gitinfo -s)")
        gitinfo_str="$(get_gitinfo_str -s)"
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 -a $gitinfo_len -gt 0 ]; then
		gitinfo_len=$(get_tw "$(get_gitinfo -r)")
        gitinfo_str="$(get_gitinfo_str -r)"
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 -a $gitinfo_len -gt 0 ]; then
        deco_len=6
        gitinfo_len=0
        gitinfo_str=""
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 ]; then
    	local reduce_len=$(( -$dash_len + 1 ))
    	dir="$(cut_path "$dir" $reduce_len)"
		local dir_len=$(get_tw "$dir")
		eval $dash_len_cmd
    fi

    if [ $dash_len -le 0 ]; then
        dir="...${dir:$(( 4 - ${dash_len} ))}"
        dash_len=1
    fi

    local dash_str="${DASH_LONG:0:$dash_len}"
	local userhost_str="$C_BG<$C_USERHOST$userhost$C_BG: "
	local dir_str="$C_DIR$dir$C_BG>"
	local date_str="$C_BG<$C_DATE\D{%T %a}$C_BG>"

    PS1="$userhost_str$dir_str$gitinfo_str$dash_str$date_str$C_END\n\\$ "
}

make_prompt_init
